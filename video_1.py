def say_hi(name="Vlad"):
    print(f"Hello, {name}")

say_hi()
say_hi("Anton")
say_hi_copy = say_hi #присвоюємо не результат роботи ф-ї, а саме тільки назву ф-ї
print(say_hi_copy) #при запуску коду бачимо, що тут лежить саме ф-я
say_hi_copy() #смисл в тому що say_hi_copy() буде працювати так само як працювала say_hi()
            #по факту у памяті створена одна ф-я, але ми звертаємося до неї з двох різних змінних







#можемо створювати ф-ю всередині іншої ф-ї
"""
Перш ніж перейдемо до декораторів, то хочу розповісти вам декілька важливих концепцій у мові
пайтон.
Ф-ї та взагалі усе в пайтоні є обєкт.
Якщо кожен елемент є обєктом, то ми можемо будь що зберігати у змінну.
Ту ж саму ф-ю, ми створили ф-ю - ми може зберегти у змінну.
Ми можемо усе повертати через return, навіть ф-ю.
У пайтоні ми можемо передавати ф-ю  та все що завгодно як аргументи до якихось ф-й, методів чи чогось іншого.
Напишемо ф-ю яка буде просто вітати

Можемо створювати ф-ю не просто у коді, а в середині іншої ф-ї
"""

def outer_func(): #показуємо що можна створювати ф-ю всередині ф-ї

    def greeter():
        return "Hi"

    print(greeter())

outer_func()
#greeter() #тут пробуємо чи можемо напряму викликати внутрішню ф-ю greeter()

"""
запускаємо і бачимо що виконується внтурішня ф-я

виявляється що напряму ми не можемо викликати greeter(), оскільки вона поза загальної області видимості
всередині ф-ї ми можемо бачити зовнішні ф-ї, зовнішні змінні і т.п., але не навпаки
ззовні ми на практиці не будемо викликати внутрішню ф-ю, але ф-ю всередині іншої ф-ї ми будемо використовувати
це знадобиться для замикання
створимо більш логічний приклад
створимо ф-ю яка буде щось принтити
в пайтоні усе є обєктом і ф-я може повертати обєкт - який висновок ми можемо з цього зробити
реалізуємо код де в залежності від того який тип параметра буде отримувати зовнішня ф-я - то в залежності
від цього буде виконуватися одна або інша внутрішня ф-я всередині зовнішньої ф-ї
зробимо щось типу конструктора ф-й
"""

print("*", 100)
def print_message(my_type="hello"):

    def say_hi():
        return "Hello"

    def say_by():
        return "Bye"

    if my_type == 'hello':
        return say_hi()
    return say_by()

my_func = print_message()
print(my_func)
#print(my_func())
my_func_2 = print_message("bye")
print(my_func_2)

"""
Що ми зробили? Ми створили ф-ю яка в залежності від параметрів виконує внутрішню ф-ю
Це щось типу фабрики або конструкції ф-й
наша ф-я повертає іншу ф-ю
все у пайтоні є обєкт
це є основою для вивчення декораторів
"""
