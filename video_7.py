"""
Спробую просто пояснити тему контекстний менеджер

"""
try:
    f = open("example.txt", "a")
    f.write("\nAnother Line")
except Exception as e:
    print(e)
finally:
    f.close()


"""
Давайте на прикладі подивимося що може статися, якщо ми не будемо закривати файл
Створимо список і будемо йти мільйон разів
"""
# file_descriptors = []
# for i in range(1000000):
#     file_descriptors.append(open("example.txt", "a"))

"""
Запустимо і отримаємо помилку:
OSError: [Errno 24] Too many open files: 'example.txt'
це через те що ми не закривали файли - тому слід закривати

Ми пишемо на пайтоні - мова пайтон - це про простоту - якимось чином слід оптимізувати роботу з файлами і 
кожен раз не писати конструкцію try except finnaly

для цього розробники пайтон підготували дуже класну річ - контекстний менеджер

Переробимо наш код, використовуючи контекстний менеджер

для роботи з контекстним менеджером використовується конструкція with
далі відкриваємо файл as змінна


"""

with open("example.txt", "a") as f:
    f.write("\nAnother LLLine")

"""
конструкція with - це не контекстний менеджер
конструкція with - працює з контекстним менеджером
контекстний менеджер - це те що повертає нам ця ф-я open("example.txt", "a")
коли будете створювати свої контекстні менеджери - то зрозумієте краще 

f - змінна контекстного менеджера

не видно f.close() А як він тоді працює?
Суть у тому, що контекстний менеджер у нашому випадку самостійно робить f.close()

наш контекстний менеджер завжди робить f.close() - як тільки ми виходимо із блоку with

Поговоримо концептуально для чого був створений контекстний менеджер

Ідейно контекстний менеджер створений для того щоб робити певну дію до чогось, та обовязково робити постфактум
якусь процедуру

Він створений для тих операцій, які обовязково потребують постобробки

Наприклад закривати файл, або закривати сесію

Для закриття сесії також завжди використовується контекстний менеджер - бо це зручно.

Контекстний мендежер виконує певну роботу до того як зайде до тіла нашого коду та після виходу з контекстного 
менеджеру він також щось робить

Контекстний менеджер створений не тільки для того щоб робити щось до і щось після.
Він також створений для нашої безпеки, для безпеки нашого коду.

f.close() - виконається, навіть якщо виконання тіла коду завершиться з помилкою

Це просто зручний вигляд того коду який ми писали: try, except, finnaly

конструкція With - є для того щоб наш код був безпечним

також конструкція with - робить так що файл закриється і не буде видана помилка, навіть якщо помилка буде у тілі кода

"""
