"""
розглянемо контекстний менеджер здорового програміста
statement block - блок операторів
контекстний менеджер має створюватися за допомогою класу та двох магічних методів:
ці два магічні методи називаються enter та exit
Це часто питають на співбесідах
enter - це код який буде виконуватися до того як ми зайдемо у блок контекстного менеджера
exit - це код який буде виконуватися після виконання контекстного менеджера

Слід зауважити що метод exit має приймати 3 додаткових параметри:
exc_type - тип ексепшена
exc_val - значення ексепшена
exc_tb - сам трейсбек

Примітка: exc_tb в методі __exit__ вказує на "traceback" (відстеження слідування) асоційоване з виключенням,
яке було піднято в контекстному менеджері.
У Python, коли виникає помилка, створюється так званий traceback, що представляє собою слідування викликів функцій,
які призвели до виникнення цієї помилки.
Трейсбек містить інформацію про рядки коду, де виникла помилка, і в яких функціях ці рядки були викликані.

ці параметри передаються до метода exit у випадку якщо код контекстного менеджера завершився з помилкою,
а не просто тому що він завершився

Якщо буде помилка то нам потрібно буде покласти змінні у параметри exc_type, exc_val, exc_tb

Але зараз це розглядати не будемо бо у нас зараз дуже простий код

ми створили к м за допомогою класу - але використовувати можемо так само як той що створений ф-єю

Зверніть увагу:
    def __enter__(self):
        print('enter method called')
        return self
тут є  return self - оскільки ми маємо повернути обєкт контекстного менеджера з яким будемо працювати

цей обєкт self якраз зберігається у змінну manager

у попередньому випадку ми нічого не повертали з допомогою yield, хоча можна було це зробити


"""

class ContextManager:
    def __init__(self):
        print('init method called')


    def __enter__(self):
        print('enter method called')
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        print('exit method called')

with ContextManager() as manager:
    print('with statement block')

"""
Подивимося на порядок виводу результатів:
init method called
enter method called
with statement block
exit method called

у наступному відео розглянемо практичний приклад контекстного менеджера
"""